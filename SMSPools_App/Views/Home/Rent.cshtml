@model RentNumberViewModel

<div class="container">
    <div class="row">
        <div class="col-md-3">
            <h2>Rent Number</h2>
            <form asp-action="RentNumber" asp-controller="Rent" method="post">
                <input type="hidden" name="ApiKey" value="@Model.Account.ApiKey" />
                <input type="hidden" id="accountId" name="id" value="@Model.Account.Id" />
                <div class="form-group mt-3">
                    <label>Country</label>
                    <input type="text" id="countryCode" value="1" class="form-control" readonly />
                </div>
                <div class="form-group mt-3">
                    <label>Service</label>
                    <input type="text" id="serviceId" value="828" class="form-control" readonly />
                </div>

                <div class="form-group">
                    <label for="rentCount">Numbers:</label>
                    <input type="number" id="rentCount" class="form-control" value="1" min="1" />
                </div>
                <button type="submit" id="rentBtn" class="btn btn-primary mt-4">Rent Number</button>

                <div class="mt-3">
                    <a asp-controller="Home" asp-action="Index" class="btn btn-link">
                        <i class="fa fa-home"></i>
                        Back to Home
                    </a>
                </div>
            </form>

            <div id="phoneSection" style="margin-top: 90px; display: none">
                <label>Phone Number:</label>
                <input type="text" id="phoneNumber" readonly class="form-control" />
                <input type="hidden" id="orderIdInput" name="OrderId" />

                <button class="btn btn-warning mt-2 resend-btn">Resend</button>
                <button id="getOtpBtn" class="btn btn-success mt-2">Get OTP</button>
                <button id="clearBtn" class="btn btn-secondary mt-2">Clear</button>

                <div class="mt-3">
                    <strong>OTP:</strong> <span class="text-danger" id="otpDisplay"></span>
                </div>
            </div>

        </div>

        <div class="col-md-1"></div>

        <div class="col-md-8">  
            <div class="row">
                <div class="col-md-4 ml-2">
                    <h3>Rented Numbers</h3>
                </div>
                <div class="col-md-8 ml-2">
                    <button id="clearAllBtn" class="btn btn-danger fw-bold">Clear All Data</button>
                    <button id="downloadBtn" class="btn btn-warning ml-2 fw-bold">
                        <i class="fas fa-download"></i> Download All
                    </button>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-md-6 d-flex">
                    <input type="text" id="searchInput" class="form-control" placeholder="Search..." style="width: 350px;" />
                    <button id="clearSearchBtn" class="btn btn-secondary fw-bold">Clear</button>
                </div>
                <div class="col-md-6 d-flex">
                    <input type="text" id="globalSearchInput" class="form-control" placeholder="Search with SMSPools..." style="width: 350px;" />
                    <button id="globalClearSearchBtn" class="btn btn-secondary fw-bold">Clear</button>
                </div>
            </div>

            <table class="table table-bordered mt-3" id="ordersTable" asp-action="GetAllRentedNumbers" asp-controller="Rent">
                <thead class="thead-light bg-light">
                    <tr>
                        <th>#</th>
                        <th>Order Code</th>
                        <th>Phone</th>
                        <th>Code</th>
                        <th>Country</th>
                        <th>Service</th>
                        <th>Status</th>
                        <th>Cost</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="rentedNumbersTable">
                    @if (Model.Orders != null && Model.Orders.Any())
                    {
                        int index = 1;
                        foreach (var order in Model.Orders)
                        {
                            <tr>
                                <td>@index</td>
                                <td>@order.OrderCode</td>
                                <td class="clickable-phone" data-phone="@order.PhoneNumber" 
                                        data-orderid="@order.OrderId"
                                        data-ordercode="@order.OrderCode">
                                    <a href="javascript:void(0);" class="text-black text-decoration-none">@order.PhoneNumber</a>
                                </td>
                                <td class="clickable-code" data-code="@order.Code"
                                        data-orderid="@order.OrderId"
                                        data-ordercode="@order.OrderCode">
                                    <a href="javascript:void(0);" class="text-black text-decoration-none">@order.Code</a>
                                </td>
                                <td>@order.Country</td>
                                <td>@order.Service</td>
                                <td>
                                    @switch (order.Status?.ToLower())
                                    {
                                        case "pending":
                                            <span class="badge badge-warning" style="font-size: 14px;">
                                                Activating SMS
                                                @if (order.TimeLeft > 0)
                                                {
                                                    <span class="time-left" data-orderid="@order.OrderId"
                                                          data-timeleft="@order.TimeLeft"> - @order.TimeLeft s</span>
                                                }
                                            </span>
                                            break;
                                        case "completed":
                                            <span class="badge badge-success" style="font-size: 14px;">Completed</span>
                                            break;
                                        case "activating":
                                            <span class="badge badge-info" style="font-size: 14px;">Activating</span>
                                            break;
                                        case "expired":
                                            <span class="badge badge-danger" style="font-size: 14px;">Expired</span>
                                            break;
                                        case "resend":
                                            <span class="badge badge-secondary" style="font-size: 14px;">Resend</span>
                                            break;
                                        default:
                                            <span class="badge badge-warning" style="font-size: 14px;">
                                                Activating SMS
                                                @if (order.TimeLeft > 0)
                                                {
                                                    <span class="time-left" data-orderid="@order.OrderId"
                                                          data-timeleft="@order.TimeLeft"> - @order.TimeLeft s</span>
                                                }
                                            </span>
                                         break;
                                    }
                                </td>                            
                                <td>@order.Cost</td>
                                <td>
                                    @if (order.Status == "pending" || order.Status == "activating") {
                                        <button class="btn btn-sm btn-warning refund-btn fw-bold" id="refundBtn"
                                                data-ordercode="@order.OrderCode"
                                                data-orderid="@order.OrderId">
                                            Refund
                                        </button>
                                    }
                                    else {
                                        <button class="btn btn-sm btn-primary resend-btn-table fw-bold"
                                                data-ordercode="@order.OrderCode"        
                                                data-orderid="@order.OrderId">     
                                            Resend
                                        </button>
                                    }
                               
                                </td>
                            </tr>
                            index++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="text-center">No rented numbers found</td>
                        </tr>
                    }
                </tbody>
            </table>

            <nav aria-label="Page navigation example">
                <div class="d-flex justify-content-between align-items-center">
                    <div id="pageInfo" class="text-muted fw-bold" style="margin-top: -10px"></div>
                    <div style="margin: 0 auto">
                        <ul class="pagination pagination-dark" id="pagination"></ul>
                    </div>
                </div>
            </nav>
        </div>
    </div>
</div>

@* <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
 *@
@section Scripts {
    <script>
        let allOrders = [];
        const pageSize = 10;
        let currentPage = 1;

        let fullOrders = [];
        let filteredOrders = [];

        let isFilteringFromSMS = false;
        let isFiltering = false;

        let smsKeyword = '';
        let globalKeyword = '';

        function getUserToken() {
            let token = localStorage.getItem("userToken");
            if (!token) {
                token = "user_" + Date.now() + "_" + Math.random().toString(36).substring(2, 10);
                localStorage.setItem("userToken", token);
            }
            return token;
        }

        function reloadOrders() {
            const id = $("#accountId").val();
            const token = getUserToken();
            const currentPageBeforeReload = currentPage;

            $.post('@Url.Action("GetAllRentedNumbers", "Rent")', { id: id, userToken: token }, function (result) {
                if (result.success && result.orders) {
                    allOrders = result.orders;

                    // sync mapping
                    syncOrderMap(allOrders);

                    if (allOrders.length > 0) {
                        $("#downloadBtn").prop("disabled", false);
                    } else {
                        $("#downloadBtn").prop("disabled", true);
                    }
                    if (isFiltering) {
                        const keyword = $("#searchInput").val().toLowerCase().trim();
                        filterOrders(keyword);
                    } else {
                        const totalPages = Math.ceil(allOrders.length / pageSize);
                        if (currentPage > totalPages) {
                            currentPage = totalPages > 0 ? totalPages : 1;
                        }
                        renderTablePage(currentPage);
                    }

                    updateTimeLeft();
                } else {
                    $("#downloadBtn").prop("disabled", true);
                    console.log("No orders found or failed to load.");
                }
            });
        }

        function reloadFullOrders() {
            const id = $("#accountId").val();
            const currentPageBeforeReload = currentPage;

            $.post('@Url.Action("GetAllOrders", "Rent")', { id: id }, function (result) {
                if (result.success && result.orders) {
                    fullOrders = result.orders;

                    // sync mapping
                    syncOrderMap(fullOrders);

                    if (fullOrders.length > 0) {
                        $("#downloadBtn").prop("disabled", false);
                    } else {
                        $("#downloadBtn").prop("disabled", true);
                    }
                    isFilteringFromSMS = true;
                    if (isFilteringFromSMS) {
                        const keyword = $("#globalSearchInput").val().toLowerCase().trim();
                        filterSMSOrders(keyword);
                    } else {
                        const totalPages = Math.ceil(fullOrders.length / pageSize);
                        if (currentPage > totalPages) {
                            currentPage = totalPages > 0 ? totalPages : 1;
                        }
                        renderTablePage(currentPage);
                    }
                    updateTimeLeft();
                } else {
                    $("#downloadBtn").prop("disabled", true);
                    console.error("Failed to reload full orders:", result.message);
                }
            });
        }

        // sync mapping function
        function syncOrderMap(orders) {
            let orderMap = JSON.parse(localStorage.getItem("orderMap") || "{}");

            orders.forEach(o => {
                const cleanCode = (o.orderCode || "").trim();
                const cleanId = (o.orderId || "").trim();
                if (cleanCode && cleanId) {
                    orderMap[cleanCode] = cleanId;
                    orderMap[cleanId] = cleanId;
                }
            });

            localStorage.setItem("orderMap", JSON.stringify(orderMap));
        }


        $(document).ready(function () {
            const userToken = getUserToken();
            const id = $("#accountId").val().trim();
            $("#downloadBtn").prop("disabled", true);
            const orderMap = {}
            let lastKeyword = "";

            $("#searchInput").on("input", function() {
                const keyword = $(this).val().toLowerCase().trim();

                if (!keyword) {
                    resetInputs();
                    isFiltering = false;
                    currentPage = 1;
                    renderTablePage(currentPage);
                    reloadOrders();
                    return;
                }

                if (keyword !== "") {
                    if (lastKeyword !== keyword) {
                        isFiltering = true;
                        currentPage = 1;
                        reloadOrders();
                    }
                } else {
                    if (isFiltering) {
                        isFiltering = false;
                        reloadOrders();
                    }
                }

                isFiltering = true;
                isFilteringFromSMS = false;
                $('#globalSearchInput').prop('disabled', true);
                $('#globalClearSearchBtn').prop('disabled', true);
                $('#clearSearchBtn').prop('disabled', false);

                filterOrders(keyword);

            });

            function resetInputs() {
                const searchVal = $('#searchInput').val().trim();
                const searchSmsVal = $('#globalSearchInput').val().trim();

                if (searchVal === '' && searchSmsVal === '') {
                    $('#searchInput').prop('disabled', false);
                    $('#globalSearchInput').prop('disabled', false);
                }
            }

            $("#globalSearchInput").on("input", function() {
                const keyword = $(this).val().toLowerCase().trim();

                if (!keyword) {
                    resetInputs();
                    isFilteringFromSMS = false;
                    isFiltering = false;
                    lastKeyword = "";

                    currentPage = 1;
                    renderTablePage(currentPage);
                    reloadOrders();

                    return;
                }
                if (lastKeyword !== keyword) {
                    isFilteringFromSMS = true;
                    currentPage = 1;
                    lastKeyword = keyword;

                    if (fullOrders.length === 0) {
                        reloadFullOrders();
                    } else {
                        filterSMSOrders(keyword);
                    }
                }

                isFiltering = false;
                isFilteringFromSMS  = true;
                $('#searchInput').prop('disabled', true);
                $('#clearSearchBtn').prop('disabled', true);
                $('#globalClearSearchBtn').prop('disabled', false);
            });

            $("#clearAllBtn").click(function() {
                const id = $("#accountId").val().trim();
                Swal.fire({
                    title: "Are you sure?",
                    text: "Do you want to cancel all pending orders?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, cancel it!",
                    cancelButtonText: "Cancel"
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.post('@Url.Action("CancelAllOrders", "Rent")', { id: id }, function (res) {
                            console.log("Response:", res);

                            if (res.success === true) {
                                toastr.success(res.message);
                                reloadOrders();
                            } else {
                                toastr.error("Cancel failed: " + res.message);
                            }
                        });
                    }
                });
            });

            $("#clearSearchBtn").click(function () {
                resetInputs();
                $("#searchInput").val('');
                $("#globalSearchInput").prop('disabled', false);
                $('#globalClearSearchBtn').prop('disabled', false);
                isFiltering = false;
                isFilteringFromSMS = false;
                currentPage = 1;
                reloadOrders();
                renderTablePage(currentPage);
            });

            $("#globalClearSearchBtn").click(function () {
                resetInputs();
                $("#globalSearchInput").val('');
                $("#searchInput").prop('disabled', false);
                $('#clearSearchBtn').prop('disabled', false);
                isFiltering = false;
                isFilteringFromSMS = false;
                currentPage = 1;
                reloadOrders();
                renderTablePage(currentPage);
            });

            $("form").on("submit", function (e) {
                e.preventDefault(); // Prevent form submission
            });

            $("#rentBtn").on("click", function () {
               const count = parseInt($("#rentCount").val());
               const token = getUserToken();
               const id = $("#accountId").val();

               console.log("Clicked rentBtn");
               console.log("Count:", count);
               console.log("Token:", token);
               console.log("ID:", id);
               if (isNaN(count) || count < 1) {
                  toastr.error("Please enter valid number.");
                  return;
               }
               if (!token || !id) {
                  toastr.error("Missing account ID or token.");
                  return;
               }

               if (count === 1) {
                  rentOneNumber(id, token);
               }else {
                  rentMultipleNumbers(count, id, token);
               }
            });

            $("#downloadBtn").on("click", function() {
                let dataToDownload = [];
                if (isFilteringFromSMS || isFiltering) {
                    dataToDownload = filteredOrders;
                } else {
                    dataToDownload = allOrders;
                }
                downloadCSV(dataToDownload);   
            });

            function downloadCSV(data) {
                console.log("Data to download: ", data);
                if (!data || data.length === 0) {
                    toastr.error("No data to download");
                    return;
                } else {
                    toastr.success("Download data successful");
                    let headers = [
                        "Id",
                        "Order Code",
                        "Phone Number",
                        "Code",
                        "Country",
                        "Service",
                        "Status",
                        "Cost"
                    ]

                    let rows = data.map(order => {
                        return [
                            order.id,
                            order.order_code,
                            order.phonenumber,
                            order.code,
                            order.country,
                            order.service,
                            order.status,
                            order.cost
                        ];
                    });

                    console.log("Rows data to csv: ", rows);

                    let separator = ";";
                    let csvContent = "data:text/csv;charset=utf-8,\uFEFF"
                        + headers.join(separator) + "\n"
                        + rows.map(e => e.join(separator)).join("\n");

                    console.log("CSV Content: ", csvContent);

                    const encodeUri = encodeURI(csvContent);
                    const link = document.createElement("a");
                    link.setAttribute("href", encodeUri);
                    link.setAttribute("download", "orders.csv");
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }   
            }

            function rentOneNumber(id, token) {
                return new Promise((resolve, reject) => {
                    $.post('@Url.Action("RentNumber", "Rent")', { id: id, userToken: token }, function (res) {
                        if (res.success) {
                            $("#phoneNumber").val(res.phoneNumber);
                            $("#phoneSection").show();

                            const orderId = res.orderId;
                            const orderCode = res.orderCode || orderId;

                            const cleanCode = (orderCode || "").trim();
                            const cleanId = (orderId || "").trim();

                            if (cleanCode && cleanId) {
                                let orderMap = JSON.parse(localStorage.getItem("orderMap") || "{}");
                                orderMap[cleanCode] = cleanId;
                                orderMap[cleanId] = cleanId;
                                localStorage.setItem("orderMap", JSON.stringify(orderMap));
                            }

                            console.log("Order map orderCode: ", orderMap[orderCode]);
                            console.log("Order map orderId: ", orderMap[orderCode]);

                            $("#getOtpBtn").data("order_id", orderId);
                            reloadOrders();

                            resolve(res);
                        } else {
                            toastr.error("Error: " + res.message);
                            reject(res.message);
                        }
                    });
                });
            }

            async function rentMultipleNumbers(count, id, token) {
                for(let i = 0; i < count; i++) {
                   try {
                      console.log(`Rending number ${i + 1}...`);
                      await rentOneNumber(id, token);
                   }
                   catch (error) {
                       console.warn("Rending fail:", error);
                   }
                   await new Promise(resolve => setTimeout(resolve, 2500));
                }
            }

            setInterval(function () {
                if (!isFiltering && !isFilteringFromSMS) {
                    reloadOrders();
                }
            }, 1000);

            $("#getOtpBtn").on("click", function() {
                const id = $("#accountId").val().trim();
                const orderId = $(this).data("order_id");
                startCountdown();

                $.post('@Url.Action("GetOtp", "Rent")', { id: id, orderId: orderId }, function (res) 
                {
                    if (res.success && res.otp) {
                        clearInterval(countdownInterval);
                        $("#otpDisplay").text(res.otp);
                        setTimeout(() => {
                            $("#otpDisplay").fadeOut(300, function () {
                                $(this).text('').show();
                            });
                        }, 5000);
                    }
                });
            });

            $("#clearBtn").on("click", function() {
                $("#phoneNumber").val("");
                $("#phoneSection").hide();
            });

            let countdownInterval;
            let countdown = 30;

            function startCountdown() {
                clearInterval(countdownInterval);
                countdown = 30;
                $("#otpDisplay").text("Waiting for OTP... (" + countdown + "s)");
                countdownInterval = setInterval(() => {
                    countdown--;
                    if (countdown > 0) {
                        $("#otpDisplay").text("Waiting for OTP... (" + countdown + "s)");
                    } else {
                        clearInterval(countdownInterval);
                        $("#otpDisplay").text("Failed to get OTP. Please try again!!");
                        setTimeout(() => {
                            $("#otpDisplay").fadeOut(300, function () {
                                $(this).text('').show();
                            });
                        }, 2000);
                    }
                }, 1000);   
            }

            $(document).on("click", ".clickable-phone", function () {
                const phone = $(this).data("phone");
                let orderId = $(this).data("orderid");
                const orderCode = $(this).data("ordercode");
                orderId = orderCode;
                $("#phoneNumber").val(phone);
                $("#phoneSection").show();
                $("#getOtpBtn").data("order_id", orderId);
                $("#ordersTable tbody tr").removeClass("table-active");
                $(this).closest("tr").addClass("table-active");

                navigator.clipboard.writeText(phone)
                    .then(() => {
                        toastr.success("Copied phone number: " + phone);
                    })
                    .catch(err => {
                        toastr.error("Failed to copy phone number");
                    });
            });

            $(document).on("click", ".clickable-code", function () {
                const code = $(this).data("code");
                if (code == '0') return;

                let orderId = $(this).data("orderid");
                const orderCode = $(this).data("ordercode");
                orderId = orderCode;;
                $("#getOtpBtn").data("order_id", orderId);
                $("#ordersTable tbody tr").removeClass("table-active");
                $(this).closest("tr").addClass("table-active");

               navigator.clipboard.writeText(code)
                    .then(() => {
                        toastr.success("Copied code: " + code);
                    })
                    .catch(err => {
                        toastr.error("Failed to copy code");
               });
            });


            $(document).on("click", ".resend-btn", function () {
                const id = $("#accountId").val().trim();
                const orderId = $("#getOtpBtn").data("order_id");

                $.post('@Url.Action("ResendCode", "Rent")', { id: id, orderId: orderId }, function (res)
                {
                    if (res.success) {
                        toastr.success("Resent successfully");
                    } else {
                        toastr.error("Failed to resend code");
                    }
                });
            });

            $(document).on("click", ".resend-btn-table", function () {
                const id = $("#accountId").val().trim();
                const orderCode = $(this).data("ordercode");
                let orderId = $(this).data("orderid");
                orderId = orderCode;

                $.post('@Url.Action("ResendCode", "Rent")', { id: id, orderId: orderId }, function (res) {
                    if (res.success) {
                        toastr.success("Resent successfully");
                    } else {
                        toastr.error("Failed to resend code");
                    }
                });
            });

            $(document).on('click', '.refund-btn', function () {
                const orderCode = $(this).data("ordercode");
                console.log("Order code: ", orderCode);
                let orderMap = JSON.parse(localStorage.getItem("orderMap") || "{}");
                let orderId = $(this).data("orderid");

                console.log("Order map orderCode: ", orderMap[orderCode]);
                console.log("Order map orderId: ", orderMap[orderCode]);

                if (!orderId && orderMap[orderCode]) {
                    orderId = orderMap[orderCode];
                }

                if (!orderId) {
                    toastr.error("Order ID is missing. Cannot proceed with refund.");
                    return;
                }

                const id = $("#accountId").val().trim();
                Swal.fire({
                   title: "Are you sure?",
                   text: "Do you want to refund this order?",
                   icon: "warning",
                   showCancelButton: true,
                   confirmButtonText: "Yes, refund it!",
                   cancelButtonText: "Cancel"
                }).then((result) => {
                      if (result.isConfirmed) {
                          $.post('@Url.Action("RefundOrder", "Rent")', { id: id, orderId: orderId }, function (res) {
                             if (res.success === true || (res.message && res.message.includes("already been refunded"))) {
                                toastr.success(res.message);
                                reloadOrders();
                             } else {
                                if (res.message && res.message.includes("cannot be cancelled yet")) {
                                    const stillExists = allOrders.some(o => o.orderId === orderId);
                                    if (!stillExists) {
                                        toastr.info("Order has been cancelled.");
                                        reloadOrders();
                                        return;
                                    }
                                }
                                toastr.error("Refund failed: " + res.message);
                             }
                          });
                      }
                });
            });
        });

        function filterOrders(keyword) {
            keyword = keyword.toLowerCase().trim();

            filteredOrders = allOrders.filter(order => {
                return (
                    (order.order_code && order.order_code?.toLowerCase().includes(keyword)) ||
                    (order.phonenumber && order.phonenumber?.toLowerCase().includes(keyword)) ||
                    (order.code && order.code?.toLowerCase().includes(keyword)) ||
                    (order.country && order.country?.toLowerCase().includes(keyword)) ||
                    (order.service && order.service?.toLowerCase().includes(keyword)) ||
                    (order.status && order.status?.toLowerCase().includes(keyword)) ||
                    (order.cost && order.cost?.toLowerCase().includes(keyword))
                );
            });

            const maxPage = Math.ceil(filteredOrders.length / pageSize);
            if (currentPage > maxPage) {
                currentPage = maxPage > 0 ? maxPage : 1;
            }

            if (filteredOrders.length === 0) {
                $("#downloadBtn").prop("disabled", true);
                $("#pageInfo").text("").hide();
            } else {
                $("#downloadBtn").prop("disabled", false);
                $("#pageInfo").text(`Page ${currentPage} of ${maxPage || 1}`).show();

            }
            renderTablePage(currentPage);
        }

        function filterSMSOrders(keyword) {
            keyword = keyword.toLowerCase().trim();
            filteredOrders = fullOrders.filter(order => {
                if (!order || typeof order !== "object") return false;

                return (
                    (order.order_code && order.order_code?.toLowerCase().includes(keyword)) ||
                    (order.phonenumber && order.phonenumber?.toLowerCase().includes(keyword)) ||
                    (order.code && order.code?.toLowerCase().includes(keyword)) ||
                    (order.country && order.country?.toLowerCase().includes(keyword)) ||
                    (order.service && order.service?.toLowerCase().includes(keyword)) ||
                    (order.status && order.status   ?.toLowerCase().includes(keyword)) ||
                    (order.cost && order.cost?.toLowerCase().includes(keyword))
                );
            });
            const maxPage = Math.ceil(filteredOrders.length / pageSize);
            if (currentPage > maxPage) {
                currentPage = maxPage > 0 ? maxPage : 1;
            }

            if (filteredOrders.length === 0) {
                $("#downloadBtn").prop("disabled", true);
                $("#pageInfo").text("").hide();
            } else {
                $("#downloadBtn").prop("disabled", false);
                $("#pageInfo").text(`Page ${currentPage} of ${maxPage || 1}`).show();

            }
            renderTablePage(currentPage);
        }

        function renderTablePage(page) {
            currentPage = page;
            let ordersToRender = [];
            if (isFilteringFromSMS) {
                ordersToRender = filteredOrders;
            } else if (isFiltering) {
                ordersToRender = filteredOrders;
            } else {
                ordersToRender = allOrders;
            }
            const totalPages = Math.ceil(ordersToRender.length / pageSize);
            if (page > totalPages) {
                currentPage = 1;
            } else {
                currentPage = page;
            }
            if (ordersToRender.length === 0) {
                $("#rentedNumbersTable").html(`
                    <tr>
                        <td colspan="9" class="text-center">No rented numbers found</td>
                    </tr>`);
                $("#pagination").html("");
                $("#pageInfo").text("").hide();

                return;
            }
            const start = (page - 1) * pageSize;
            const end = start + pageSize;
            const pagedData = ordersToRender.slice(start, end);
            let rows = "";
            let index = start + 1;

            pagedData.forEach(order => {
                let statusBadge = "";
                const status = order.status?.toLowerCase();
                const timeLeft = Number(order.time_left) || 0;
                const createdAt = new Date();

                switch(status) {
                    case "pending":
                        statusBadge = `
                            <span class="badge badge-warning" style="font-size: 14px;">
                                Awaiting SMS <span class="time-left" 
                                    data-orderid="${order.order_id}" 
                                    data-timeleft="${timeLeft}">(${timeLeft}s)</span>
                            </span>`;
                        break;
                    case "completed":
                        statusBadge = '<span class="badge badge-success" style="font-size: 14px;">Completed</span>';
                        break;
                    case "activating":
                        statusBadge = '<span class="badge badge-info" style="font-size: 14px;">Awaiting</span>';
                        break;
                    case "expired":
                        statusBadge = '<span class="badge badge-danger" style="font-size: 14px;">Expired</span>';
                        break;
                    case "resend":
                        statusBadge = '<span class="badge badge-secondary" style="font-size: 14px;">Resend</span>';
                    default:
                        statusBadge = `
                            <span class="badge badge-warning" style="font-size: 14px;">
                                Awaiting SMS <span class="time-left"
                                    data-orderid="${order.order_id}"
                                    data-timeleft="${timeLeft}">(${timeLeft}s)</span>
                            </span>`;
                        break;
                }
                let actionButton = "";
                if (status === "pending" || status === "activating") {
                    actionButton = `<button class="btn btn-sm btn-warning refund-btn fw-bold"
                                        data-ordercode="${order.order_code}"
                                        data-orderid="${order.order_id}">
                                            Refund
                                    </button>`;
                } else {
                    actionButton = `<button class="btn btn-sm btn-primary resend-btn-table fw-bold"
                                        data-ordercode="${order.order_code}"
                                        data-orderid="${order.order_id}">
                                            Resend
                                    </button>`;
                }
                    
                rows += `
                    <tr>
                        <td>${index}</td>
                        <td>${order.order_code}</td>
                        <td class="clickable-phone" data-phone="${order.phonenumber}" 
                                data-orderid="${order.order_id}" 
                                data-ordercode="${order.order_code}">
                            <a href="javascript:void(0);" class="text-black text-decoration-none">${order.phonenumber}</a>
                        </td>
                        <td class="clickable-code" data-code="${order.code}"
                                data-orderid="${order.code}"
                                data-ordercode="${order.code}">
                            <a href="javascript:void(0);" class="text-black text-decoration-none">${order.code ?? ''}</a>
                        </td>
                        <td>${order.country}</td>
                        <td>${order.service}</td>
                        <td>${statusBadge}</td>
                        <td>${order.cost}</td>
                        <td>${actionButton}</td>                       
                    </tr>`;
                index++;
            });

            $("#rentedNumbersTable").html(rows);
            renderPagination();
        }

        function renderPagination() {
            let ordersToRender = [];

            if (isFilteringFromSMS) {
                ordersToRender = filteredOrders;
            } else if (isFiltering) {
                ordersToRender = filteredOrders;
            } else {
                ordersToRender = allOrders;
            }

            const pageCount = Math.ceil(ordersToRender.length / pageSize);
            let pagination = "";

            if (pageCount === 0) {
                $("#pagination").html("");
                $("#pageInfo").text("").hide();
                return;
            }

            $("#pageInfo").text(`Page ${currentPage} of ${pageCount}`).show();

            // Prev button
            pagination += `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage - 1}">Prev</a>
                </li>`;

            // Always show first page
            pagination += `
                <li class="page-item ${currentPage === 1 ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="1">1</a>
                </li>`;

            const visiblePages = 4;

            // Show pages 2 to visiblePages (if currentPage is near start)
            if (currentPage <= visiblePages) {
                for (let i = 2; i <= Math.min(visiblePages + 1, pageCount - 1); i++) {
                    pagination += `
                        <li class="page-item ${currentPage === i ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>`;
                }

                if (pageCount > visiblePages + 2) {
                    pagination += `
                        <li class="page-item disabled"><span class="page-link">...</span></li>`;
                }
            }

            // If current page is far from start and not close to end
            else if (currentPage > visiblePages && currentPage < pageCount - visiblePages + 1) {
                pagination += `
                    <li class="page-item disabled"><span class="page-link">...</span></li>`;

                for (let i = currentPage - 1; i <= currentPage + 1; i++) {
                    pagination += `
                        <li class="page-item ${currentPage === i ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>`;
                }

                pagination += `
                    <li class="page-item disabled"><span class="page-link">...</span></li>`;
            }

            // If current page is near the end
            else if (currentPage >= pageCount - visiblePages) {
                pagination += `
                    <li class="page-item disabled"><span class="page-link">...</span></li>`;

                for (let i = pageCount - visiblePages; i < pageCount; i++) {
                    if (i > 1) {
                        pagination += `
                            <li class="page-item ${currentPage === i ? 'active' : ''}">
                                <a class="page-link" href="#" data-page="${i}">${i}</a>
                            </li>`;
                    }
                }
            }

            // Always show last page
            if (pageCount > 1) {
                pagination += `
                    <li class="page-item ${currentPage === pageCount ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${pageCount}">${pageCount}</a>
                    </li>`;
            }

            // Next button
            pagination += `
                <li class="page-item ${currentPage === pageCount ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage + 1}">Next</a>
                </li>`;

            $("#pagination").html(pagination);

            $(".page-link").click(function (e) {
                e.preventDefault();
                const selectedPage = parseInt($(this).data("page"));
                if (!isNaN(selectedPage) && selectedPage >= 1 && selectedPage <= pageCount) {
                    renderTablePage(selectedPage);
                }
            });
        }

        let countdownTimers = {};

        function updateTimeLeft() {
            for (let key in countdownTimers) {
                clearInterval(countdownTimers[key]);
            }
            const countdownElements = document.querySelectorAll('.time-left');

            countdownElements.forEach(el => {
                let timeLeft = parseInt(el.dataset.timeleft);
                const orderId = el.dataset.orderid;

                if (isNaN(timeLeft) || timeLeft <= 0) {
                    el.textContent = `(Expired)`;
                    return;
                }

                el.textContent = `(${timeLeft}s)`;

                countdownTimers[orderId] = setInterval(() => {
                    timeLeft--;
                    el.textContent = `(${timeLeft}s)`;

                    if (timeLeft > 0) {
                        el.textContent = `(${timeLeft}s)`;
                    } else {
                        clearInterval(countdownTimers[orderId]);
                        el.textContent = "(Expired)";
                        // Optional: trigger refresh when expired
                        reloadOrders();
                    }
                }, 1000);
            });
        }

        updateTimeLeft();
    </script>
}
